type MeasurableProperty = 'clientHeight' | 'clientWidth' | 'scrollHeight' | 'scrollWidth' | 'offsetHeight' | 'offsetWidth';
type MeasurementResult = {
    value: number;
    element: HTMLElement;
};
interface UseMeasureOptions {
    property?: MeasurableProperty;
    delay?: number;
    onError?: (error: Error) => void;
}
/**
 * Hook to measure dimensions of a DOM element
 * @param onMeasure - Callback function that receives the measurement
 * @param options - Measurement options
 * @returns Callback ref to attach to the element to measure
 */
export declare const useMeasure: <T extends HTMLElement = HTMLDivElement>(onMeasure?: (result: MeasurementResult) => void, options?: UseMeasureOptions) => (node: T | null) => void;
/**
 * Legacy hook for backward compatibility
 * @deprecated Use useMeasure instead
 */
export declare const useMeasureHeight: (onRender?: (height: number) => void) => (node: HTMLDivElement | null) => void;
export {};
//# sourceMappingURL=useMeasureHeight.d.ts.map