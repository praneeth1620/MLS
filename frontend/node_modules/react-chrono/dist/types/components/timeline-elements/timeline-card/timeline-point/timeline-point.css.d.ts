export declare const shapeWrapper: string;
export declare const timelinePointBase: string;
export declare const timelinePoint: import('@vanilla-extract/recipes').RuntimeFn<{
    size: {
        sm: {
            width: `var(--${string})`;
            height: `var(--${string})`;
            minWidth: `var(--${string})`;
            minHeight: `var(--${string})`;
        };
        md: {
            width: `var(--${string})`;
            height: `var(--${string})`;
            minWidth: `var(--${string})`;
            minHeight: `var(--${string})`;
        };
        lg: {
            width: `var(--${string})`;
            height: `var(--${string})`;
            minWidth: `var(--${string})`;
            minHeight: `var(--${string})`;
        };
    };
    shape: {
        circle: string;
        square: string;
        diamond: (string | {
            transform: "rotate(45deg)";
        })[];
    };
    state: {
        inactive: {
            background: `linear-gradient(135deg, var(--${string}) 0%, var(--${string})40 100%)`;
            borderColor: `var(--${string})60`;
            boxShadow: "0 1px 3px -1px rgba(0, 0, 0, 0.08), 0 1px 2px -1px rgba(0, 0, 0, 0.04)";
        };
        active: {
            background: `radial-gradient(circle at 30% 30%, var(--${string}) 0%, var(--${string}) 70%, var(--${string}) 100%)`;
            borderColor: `var(--${string})`;
            color: "#ffffff";
            transform: "scale(1.3)";
            boxShadow: `0 0 0 4px var(--${string})30, 0 6px 20px -4px var(--${string})50, 0 4px 12px -2px rgba(0, 0, 0, 0.15)`;
            animation: `${string} 3s ease-in-out infinite`;
            position: "relative";
            zIndex: number;
        }[];
        hover: {
            background: `linear-gradient(135deg, var(--${string})80 0%, var(--${string}) 100%)`;
            borderColor: `var(--${string})`;
            color: "#ffffff";
            boxShadow: `0 0 0 3px var(--${string})25, 0 4px 12px -2px var(--${string})40`;
            transform: "scale(1.15)";
        };
    };
    interactive: {
        true: (string | {
            selectors: {
                '&:hover:not(:disabled)': {
                    transform: "scale(1.25)";
                };
                '&:active:not(:disabled)': {
                    transform: "scale(1.1)";
                };
            };
        })[];
        false: {
            cursor: "default";
            selectors: {
                '&:hover': {
                    transform: "none";
                };
            };
        };
    };
    hasIcon: {
        true: {
            padding: `var(--${string})`;
            backgroundColor: "transparent";
            border: `2px solid var(--${string})`;
        };
        false: {};
    };
    disabled: {
        true: string;
        false: {};
    };
}>;
export declare const loadingPoint: string;
export type TimelinePointVariants = Parameters<typeof timelinePoint>[0];
export declare const pointPatterns: {
    standard: string;
    featured: string;
    indicator: string;
    milestone: string;
};
//# sourceMappingURL=timeline-point.css.d.ts.map